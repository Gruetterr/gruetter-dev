
    <h1>Tiny RSA</h1>
    This is an RSA implementation I made for my Maturaarbeit. Only use this for
    fun as the PRNG used here is not cryptographically safe.

    <h2>RSA keys</h2>
    You can also enter your own keys, but be aware that they will not be checked
    for validity. The cryptosystem may not work as expected if your keys aren't
    valid.

    <h3>RSA-Modulus N</h3>
    This is the RSA-Modulus N. It needs to be a product of two primes p and q.
    <textarea type="text" id="N_key" class="keybox"></textarea>
    <h3>Public key e</h3>
    This is the public key. It has to be coprime to (p-1)*(q-1), that is gcd(e,
    (p-1)*(q-1)) = 1. If you want your friends to encrypt something for you,
    send them this and N.
    <textarea type="text" id="e_key" class="keybox"></textarea>
    <h3>Private key d</h3>
    This is the private key. It has to be the modular multiplicative inverse of
    e mod (p-1)(q-1), that is d * e â‰¡ 1 mod (p-1)(q-1). You need this and N to
    decrypt something.
    <textarea type="text" id="d_key" class="keybox"></textarea>
    <button onclick="getKeys()">Generate keys</button>

    <h2>Encryption and Decryption</h2>

    <div class="en_de_boxes">
      <div class="msgbox_container">
        <h3>Message to encrypt</h3>
        <textarea type="text" id="m_in" class="msgbox"></textarea>
        <button onclick="rsaEn()">Encrypt!</button>
      </div>

      <div class="msgbox_container">
        <h3>Encrypted message</h3>
        <textarea type="text" id="c_out" class="msgbox"></textarea>
      </div>

      <div class="msgbox_container">
        <h3>Message to decrypt</h3>
        <textarea type="text" id="c_in" class="msgbox"></textarea>
        <button onclick="rsaDe()">Decrypt!</button>
      </div>

      <div class="msgbox_container">
        <h3>Decrypted message</h3>
        <textarea type="text" id="m_out" class="msgbox"></textarea>
      </div>
    </div>

    <script src="scripts/app.js"></script>
